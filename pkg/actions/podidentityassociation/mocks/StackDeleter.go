// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"

	v1alpha5 "github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
)

// StackDeleter is an autogenerated mock type for the StackDeleter type
type StackDeleter struct {
	mock.Mock
}

// DeleteStackBySpecSync provides a mock function with given fields: ctx, stack, errCh
func (_m *StackDeleter) DeleteStackBySpecSync(ctx context.Context, stack *types.Stack, errCh chan error) error {
	ret := _m.Called(ctx, stack, errCh)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStackBySpecSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Stack, chan error) error); ok {
		r0 = rf(ctx, stack, errCh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeStack provides a mock function with given fields: ctx, stack
func (_m *StackDeleter) DescribeStack(ctx context.Context, stack *types.Stack) (*types.Stack, error) {
	ret := _m.Called(ctx, stack)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStack")
	}

	var r0 *types.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Stack) (*types.Stack, error)); ok {
		return rf(ctx, stack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Stack) *types.Stack); ok {
		r0 = rf(ctx, stack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Stack) error); ok {
		r1 = rf(ctx, stack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIAMServiceAccounts provides a mock function with given fields: ctx
func (_m *StackDeleter) GetIAMServiceAccounts(ctx context.Context) ([]*v1alpha5.ClusterIAMServiceAccount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIAMServiceAccounts")
	}

	var r0 []*v1alpha5.ClusterIAMServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*v1alpha5.ClusterIAMServiceAccount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*v1alpha5.ClusterIAMServiceAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha5.ClusterIAMServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPodIdentityStackNames provides a mock function with given fields: ctx
func (_m *StackDeleter) ListPodIdentityStackNames(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPodIdentityStackNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStackDeleter creates a new instance of StackDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStackDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *StackDeleter {
	mock := &StackDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

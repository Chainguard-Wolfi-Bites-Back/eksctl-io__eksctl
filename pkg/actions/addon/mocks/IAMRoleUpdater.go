// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	podidentityassociation "github.com/weaveworks/eksctl/pkg/actions/podidentityassociation"
)

// IAMRoleUpdater is an autogenerated mock type for the IAMRoleUpdater type
type IAMRoleUpdater struct {
	mock.Mock
}

// Update provides a mock function with given fields: ctx, updateConfig, podIdentityAssociationID
func (_m *IAMRoleUpdater) Update(ctx context.Context, updateConfig *podidentityassociation.UpdateConfig, podIdentityAssociationID string) (string, bool, error) {
	ret := _m.Called(ctx, updateConfig, podIdentityAssociationID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *podidentityassociation.UpdateConfig, string) (string, bool, error)); ok {
		return rf(ctx, updateConfig, podIdentityAssociationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *podidentityassociation.UpdateConfig, string) string); ok {
		r0 = rf(ctx, updateConfig, podIdentityAssociationID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *podidentityassociation.UpdateConfig, string) bool); ok {
		r1 = rf(ctx, updateConfig, podIdentityAssociationID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *podidentityassociation.UpdateConfig, string) error); ok {
		r2 = rf(ctx, updateConfig, podIdentityAssociationID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIAMRoleUpdater creates a new instance of IAMRoleUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAMRoleUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAMRoleUpdater {
	mock := &IAMRoleUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
